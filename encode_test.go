package byte64

import (
	"crypto/rand"
	"fmt"
	"testing"
)

func TestEncode(t *testing.T) {
	type args struct {
		raw []byte
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "",
			args: args{
				raw: []byte{
					0x34, 0x2f, 0xe1,
				},
			},
			want: "owHs",
		},
		{
			name: "",
			args: args{
				raw: []byte{
					0x00, 0x00, 0x00,
				},
			},
			want: "----",
		},
		{
			name: "",
			args: args{
				raw: []byte{
					0x00, 0x00, 0x00, 0x00,
				},
			},
			want: "------",
		},
		{
			name: "",
			args: args{
				raw: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			want: "-------",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Encode(tt.args.raw); got != tt.want {
				t.Errorf("Encode() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestEncodeRand(t *testing.T) {
	raw := make([]byte, 32)
	n, err := rand.Read(raw)
	fmt.Println(err, n)

	fmt.Println(Encode(raw))
}

func BenchmarkEncode(b *testing.B) {

	for i := 0; i < b.N; i++ {
		Encode([]byte{
			0x0f, 0x44, 0xbf, 0xd2, 0xd0, 0x86, 0xbf, 0xfa, 0xdb, 0xf0, 0xc7, 0xcb, 0x23, 0x5f, 0xde, 0xcf, 0x8f, 0x80, 0x06, 0xe8, 0xf2, 0x79, 0x53, 0x51, 0xa8, 0x3d, 0xf4, 0xfb, 0x07, 0x72, 0xe1, 0x8c, 0x0d, 0xc1, 0x84, 0x3d, 0x71, 0x29, 0xe0, 0x29, 0x42, 0x0d, 0x24, 0xfd, 0x36, 0xb8, 0x73, 0xa6, 0x24, 0xba, 0xb5, 0x6e, 0x21, 0xde, 0xaa, 0x31, 0x44, 0x36, 0x77, 0x56, 0x30, 0xa6, 0xa5, 0x2d, 0x48, 0x31, 0xed, 0x71, 0x86, 0x40, 0x93, 0xb3, 0x5e, 0x15, 0x08, 0x3d, 0x32, 0x9c, 0x60, 0x38, 0x05, 0x84, 0xbd, 0x69, 0x4b, 0x9c, 0x05, 0xe4, 0x55, 0x17, 0x01, 0x2e, 0x55, 0xb9, 0x68, 0x92, 0x31, 0x80, 0x7c, 0xae, 0xee, 0xa2, 0xa0, 0x47, 0x72, 0x2c, 0xda, 0x96, 0x41, 0xeb, 0xce, 0x59, 0xc5, 0x6b, 0x4a, 0xb9, 0xf6, 0x43, 0xcb, 0x7d, 0xfc, 0x80, 0x4a, 0x51, 0x4f, 0x9a, 0xb6, 0xe2, 0x21, 0xfc, 0xd1, 0x20, 0x5b, 0x0c, 0x2f, 0xc9, 0x3c, 0x37, 0x2b, 0xae, 0x5d, 0x11, 0xe7, 0xc0, 0x37, 0x3c, 0x76, 0xd0, 0x65, 0xe2, 0xc4, 0x5d, 0xc4, 0x78, 0x40, 0xda, 0xab, 0x6e, 0x18, 0x88, 0xe4, 0x4c, 0x4e, 0x16, 0x17, 0xf8, 0x5e, 0x3a, 0xc8, 0x02, 0x93, 0x4d, 0x4e, 0xd1, 0xfb, 0xad, 0x2c, 0x37, 0x3f, 0xd2, 0xef, 0x38, 0xc7, 0xf1, 0xc7, 0x87, 0x84, 0xd8, 0x69, 0x5e, 0x8d, 0xbf, 0x68, 0x25, 0xa4, 0x08, 0xc5, 0x25, 0x06, 0x75, 0x04, 0x9e, 0x88, 0x31, 0x6d, 0x48, 0x5e, 0xb9, 0x7f, 0x77, 0x2e, 0x48, 0x0d, 0x77, 0x21, 0x69, 0x33, 0x83, 0xc3, 0x56, 0x52, 0xc7, 0x98, 0x10, 0x68, 0xad, 0x3b, 0x84, 0x78, 0x14, 0x73, 0x55, 0xd3, 0x7b, 0xef, 0x03, 0xb7, 0xeb, 0x6f, 0xbd, 0x1f, 0x76, 0xdd, 0xa7, 0x1d, 0x72, 0x5d, 0x2b, 0x7a, 0xc7, 0xb0, 0x24, 0xcb, 0x3e, 0x56, 0x1e, 0xb1, 0x4a, 0x1e, 0x8a, 0x68, 0xba, 0x45, 0x6c, 0x65, 0x8b, 0x2f, 0x4b, 0x34, 0x8c, 0x3c, 0x1d, 0xa7, 0xa0, 0x01, 0xc2, 0x7f, 0x52, 0x13, 0x96, 0xfd, 0x71, 0xad, 0x23, 0xef, 0x16, 0x38, 0xa7, 0x69, 0xe9, 0x63, 0xcc, 0xa8, 0x0d, 0x46, 0xb7, 0x4c, 0x4a, 0xa4, 0x9d, 0xf9, 0xb5, 0xe4, 0x44, 0xcb, 0x1d, 0xbd, 0x34, 0xdd, 0x45, 0xb2, 0x47, 0x80, 0x88, 0x02, 0xde, 0x2b, 0x09, 0x59, 0xbc, 0x47, 0xca, 0x67, 0xc9, 0x1c, 0xd7, 0x79, 0x79, 0xbc, 0x01, 0xf1, 0x52, 0xd9, 0x32, 0x5d, 0x12, 0x07, 0xd6, 0x9e, 0x84, 0xe6, 0x38, 0x32, 0x64, 0x34, 0xd3, 0xe5, 0x24, 0x10, 0xa0, 0x19, 0x19, 0x89, 0x6d, 0xcb, 0x69, 0x58, 0x40, 0xc6, 0xa1, 0x1e, 0xa7, 0xf9, 0x7a, 0xdb, 0x49, 0x58, 0xe5, 0xdf, 0x7c, 0xc0, 0xf3, 0xc2, 0x29, 0xcf, 0xf3, 0xfb, 0x20, 0x53, 0xf4, 0x02, 0xb3, 0x0c, 0x8d, 0x96, 0xcb, 0x4a, 0xaa, 0xb6, 0x96, 0x60, 0xef, 0xdc, 0xbe, 0x68, 0xc4, 0x23, 0xf0, 0xf1, 0x11, 0x0c, 0xab, 0x5e, 0x78, 0x73, 0x1f, 0x55, 0x9c, 0x77, 0x1a, 0x4c, 0xe0, 0xae, 0xab, 0xec, 0x57, 0x93, 0x42, 0x8c, 0xe6, 0xf1, 0x66, 0xff, 0x74, 0x08, 0x4b, 0x8a, 0xa9, 0xef, 0xce, 0x34, 0xd3, 0x7d, 0xab, 0x96, 0xf2, 0xb8, 0x12, 0x72, 0xf1, 0x50, 0x6d, 0x77, 0xc0, 0x7d, 0x99, 0xcb, 0x28, 0xfb, 0x4e, 0x7d, 0x1e, 0xe8, 0x5e, 0x6b, 0xb8, 0x62, 0xaf, 0xae, 0x6e, 0x0c, 0x86, 0x65, 0x0e, 0x1c, 0x0b, 0x10, 0x43, 0x21, 0xe3, 0xde, 0xf1, 0x40, 0xa4, 0xf9, 0xb7, 0x7d, 0x0b, 0x4a, 0x05, 0x85, 0x47, 0x84, 0xf0, 0xd3, 0x0c, 0x17, 0xf8, 0x3f, 0x3e, 0xa4, 0xfb, 0x77, 0x16, 0x88, 0x90, 0xca, 0x61, 0x3b, 0x20, 0xbb, 0x6f, 0xe4, 0x2c, 0xbb, 0x3b, 0x39, 0xb3, 0x64, 0x03, 0xd1, 0xf7, 0x2c, 0xd6, 0xee, 0x5a, 0x45, 0x7f, 0x9a, 0x3e, 0xe2, 0x30, 0x79, 0xce, 0xa3, 0xaf, 0xc0, 0xf5, 0x9e, 0xae, 0x57, 0x78, 0x10, 0x76, 0xa6, 0x07, 0xfd, 0xad, 0x59, 0x24, 0xed, 0x42, 0x14, 0x63, 0x4b, 0x90, 0xeb, 0x4a, 0xb4, 0x7b, 0xd2, 0x7e, 0x63, 0x83, 0x96, 0xed, 0x08, 0xf9, 0x47, 0x31, 0xfb, 0x32, 0x67, 0x04, 0xab, 0x69, 0xa2, 0x4e, 0xe2, 0x41, 0x2f, 0xfa, 0x36, 0xf7, 0x74, 0x06, 0x56, 0x8d, 0x00, 0xba, 0x80, 0xac, 0x6b, 0x81, 0x66, 0x93, 0xae, 0x6f, 0xba, 0xc7, 0x80, 0xc1, 0x84, 0x26, 0x1f, 0x82, 0x36, 0x31, 0x81, 0x5a, 0x2e, 0x78, 0xad, 0xfb, 0xbf, 0xfc, 0xbc, 0x6a, 0x08, 0x12, 0xac, 0xbb, 0x81, 0x96, 0x62, 0xc8, 0x95, 0x78, 0x6b, 0x95, 0xa4, 0x7c, 0x36, 0xa4, 0x57, 0xa4, 0x51, 0xc8, 0x7f, 0x3d, 0xde, 0x63, 0xad, 0x3c, 0x72, 0x52, 0x51, 0x96, 0x74, 0x6c, 0xde, 0x27, 0xc7, 0x6f, 0x5c, 0xfa, 0x21, 0x06, 0x14, 0x52, 0x7c, 0x2b, 0x2f, 0xfd, 0x8e, 0x3e, 0xc0, 0x96, 0x9a, 0xa6, 0x5b, 0x8a, 0xc4, 0x47, 0x96, 0x8c, 0xd7, 0x3b, 0xd3, 0x89, 0x37, 0x68, 0x80, 0x8d, 0xcb, 0xe7, 0x59, 0xf5, 0x36, 0x71, 0xcd, 0xa6, 0x99, 0xf3, 0xa9, 0x35, 0x7e, 0xcd, 0x94, 0xb1, 0xf8, 0xeb, 0xbc, 0x23, 0x1a, 0x21, 0x9b, 0xb1, 0x9e, 0xd4, 0x10, 0x33, 0x75, 0x1c, 0x49, 0x27, 0x5d, 0x1b, 0x39, 0x7e, 0xef, 0xaa, 0x88, 0x54, 0x33, 0xb8, 0x80, 0x6e, 0x14, 0x19, 0x97, 0xfc, 0x74, 0xd8, 0x44, 0x64, 0xe8, 0x88, 0x1f, 0xf0, 0xdb, 0x69, 0x59, 0xe9, 0x3a, 0x9b, 0x13, 0x22, 0x86, 0x2e, 0x26, 0x64, 0x00, 0xf5, 0x0b, 0xa1, 0xed, 0x50, 0xc2, 0x9f, 0x0e, 0x7c, 0x80, 0xe8, 0xb9, 0x0b, 0x82, 0x14, 0xf3, 0x48, 0x82, 0x8a, 0xef, 0xe0, 0xd4, 0x8c, 0x5a, 0x2a, 0x78, 0xa7, 0x56, 0x31, 0x87, 0xbc, 0xa8, 0xac, 0xc8, 0xbe, 0xcd, 0x6f, 0xa1, 0x02, 0x7b, 0xd7, 0x1c, 0x44, 0x3d, 0xc5, 0x9d, 0x2e, 0xf9, 0x00, 0x64, 0xd2, 0x41, 0x33, 0x07, 0xa6, 0x74, 0x42, 0x35, 0xea, 0xff, 0xba, 0x5e, 0x2b, 0xeb, 0xc0, 0xfd, 0xcf, 0xe4, 0x2d, 0x00, 0x17, 0x8a, 0x8e, 0xf7, 0x8d, 0x29, 0x0a, 0xa7, 0x6d, 0x3c, 0xf9, 0x35, 0xc9, 0x35, 0x1e, 0x67, 0x15, 0xa4, 0x28, 0x2a, 0x13, 0xaf, 0x85, 0x56, 0x16, 0x3b, 0x9f, 0x40, 0xe4, 0x5d, 0x0d, 0xa6, 0x6d, 0x00, 0x13, 0x77, 0x81, 0x31, 0x75, 0x99, 0x08, 0xc7, 0xde, 0x4d, 0xd1, 0x83, 0x3a, 0x83, 0x33, 0xf1, 0x3a, 0x48, 0xb5, 0x89, 0x64, 0x03, 0x3e, 0x22, 0xd0, 0xf2, 0x26, 0x0c, 0xc2, 0xde, 0xdf, 0xaf, 0x48, 0x2f, 0x53, 0x3c, 0x53, 0x69, 0x07, 0x90, 0x69, 0xb5, 0x51, 0x6b, 0x6d, 0xd9, 0x3f, 0x47, 0x06, 0xe0, 0xbf, 0x01, 0xe4, 0x2d, 0x5d, 0x17, 0x18, 0x2e, 0x95, 0x59, 0x75, 0xa0, 0x59, 0x0b, 0x5a, 0xcf, 0xa4, 0x63, 0x20, 0x8c, 0xe0, 0x80, 0xda, 0x2e, 0xa8, 0x1d, 0x50, 0xab, 0x42, 0x99, 0xed, 0x62, 0xb0, 0xe1, 0x81, 0x15, 0xd2, 0x64, 0x63, 0x41, 0x9f, 0x1a, 0x4f, 0xb6, 0xbb, 0x8d, 0x0d, 0x1c, 0xab, 0x87, 0x0c, 0xd2, 0xdb, 0x9b, 0x05, 0x17, 0x36, 0x7c, 0x8f, 0x2e, 0x02, 0x2f, 0x17, 0xd9, 0xc0, 0x69, 0x59, 0x9b, 0xd7, 0xff, 0x1d, 0x1f, 0x6b, 0x11, 0xd1, 0x89, 0xb7, 0xf4, 0x92, 0x05, 0x3c, 0xa8, 0x0d, 0x6e, 0x9f, 0xa2, 0x04, 0x80, 0x9e, 0xd6, 0x51, 0x4b, 0x77, 0xb3, 0x23, 0x11, 0xfd, 0x01, 0xf9, 0x15, 0x99, 0xf4, 0x6d, 0xb5, 0xc1, 0xb9, 0xd8, 0xfa, 0xf8, 0x68, 0xdb, 0xc0, 0xf3, 0x6f, 0x4a, 0xbc, 0xb6, 0x71, 0xdb, 0x03, 0x99, 0x1a, 0xd3, 0x9c, 0xb7, 0xb3, 0xb3,
		})
	}
}
